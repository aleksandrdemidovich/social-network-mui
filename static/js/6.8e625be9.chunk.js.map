{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Dialogs/Headers/DialogsHeader.tsx","common/Preloader/DialogsAlert/CustomizedDialogsAlert.tsx","components/Dialogs/UserDialogElement/UserDialogElement.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginRight","spacing","marginLeft","breakpoints","up","width","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","paddingLeft","DialogsHeader","Grid","container","item","direction","flexWrap","style","boxSizing","xs","color","onChange","e","setSearchDialogName","currentTarget","value","changeEventHandler","fullWidth","placeholder","inputProps","IconButton","size","aria-label","edge","aria-haspopup","BootstrapDialog","Dialog","BootstrapDialogTitle","children","onClose","other","DialogTitle","sx","m","p","onClick","right","top","grey","CustomizedDialogsAlert","React","open","setOpen","handleClose","aria-labelledby","id","DialogContent","dividers","Typography","gutterBottom","DialogActions","Button","autoFocus","variant","deleteDialog","dialogID","CustomListItem","ListItem","visibility","UserDialogElement","secondaryAction","textDecoration","ListItemAvatar","Avatar","alt","src","ListItemText","primary","name","secondary","currentTime","Divider","RootContainer","flexDirection","overflow","overflowY","background","Dialogs","useState","searchDialogName","dialogsElements","dialogsPage","dialogs","map","d","filter","toLowerCase","includes","md","lg","Paper","elevation","wrap","List","paddingTop","compose","dialogPage","dispatch","sendMessage","newMessText","sendMessageCreator","DeleteDialogCreator"],"mappings":"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","file":"static/js/6.8e625be9.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React, {useState} from 'react';\r\nimport {\r\n    Grid,\r\n    IconButton,\r\n} from \"@mui/material\";\r\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\r\nimport {alpha, styled} from \"@mui/material/styles\";\r\nimport InputBase from \"@mui/material/InputBase\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport AddIcCallIcon from \"@mui/icons-material/AddIcCall\";\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\n\r\n\r\nconst Search = styled('div')(({theme}) => ({\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginRight: theme.spacing(2),\r\n    marginLeft: 0,\r\n    [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(0),\r\n        width: 'auto',\r\n    },\r\n}));\r\nconst SearchIconWrapper = styled('div')(({theme}) => ({\r\n    padding: theme.spacing(0, 1),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n}));\r\nconst StyledInputBase = styled(InputBase)(({theme}) => ({\r\n\r\n    '& .MuiInputBase-input': {\r\n        padding: theme.spacing(1, 1, 1, 0),\r\n        // vertical padding + font size from searchIcon\r\n        paddingLeft: `calc(1em + ${theme.spacing(3)})`,\r\n        width:'100%'\r\n    },\r\n}));\r\n\r\n\r\ntype DialogsHeaderPropsType = {\r\n    setSearchDialogName: (name: string) => void\r\n}\r\n\r\nfunction DialogsHeader(props: DialogsHeaderPropsType) {\r\n\r\n    const changeEventHandler = (e: any) => {\r\n        props.setSearchDialogName(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <Grid container item direction={\"row\"} justifyContent={\"space-between\"} alignItems={\"center\"} flexWrap={'nowrap'}\r\n              style={{padding:'10px 15px 10px 15px'}}>\r\n            <Grid item flexWrap={\"nowrap\"} boxSizing={\"border-box\"} xs={12}>\r\n                <Search >\r\n                    <SearchIconWrapper>\r\n                        <SearchIcon color={\"primary\"}/>\r\n                    </SearchIconWrapper>\r\n                    <StyledInputBase\r\n                        onChange={(e) => changeEventHandler(e)}\r\n                        fullWidth\r\n                        placeholder=\"Searchâ€¦\"\r\n                        inputProps={{'aria-label': 'search'}}\r\n                    />\r\n                </Search>\r\n            </Grid>\r\n            <Grid item>\r\n                <Grid container item direction={\"row\"} justifyContent={\"space-between\"} flexWrap={'nowrap'} alignItems={\"center\"}>\r\n                    <Grid item>\r\n                        <IconButton size=\"small\" aria-label=\"show 4 new mails\" color=\"inherit\">\r\n                            <AddIcCallIcon color={\"primary\"}/>\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            aria-label=\"show 17 new notifications\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <EditOutlinedIcon color={\"primary\"}/>\r\n\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            edge=\"end\"\r\n                            aria-label=\"account of current user\"\r\n                            aria-haspopup=\"true\"\r\n                            color=\"inherit\"\r\n                        >\r\n                            <MoreHorizIcon color={\"primary\"}/>\r\n                        </IconButton>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default DialogsHeader","import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport { styled } from '@mui/material/styles';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport Typography from '@mui/material/Typography';\r\nimport DeleteForeverIcon from '@mui/icons-material/DeleteForever';\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}));\r\n\r\nexport interface DialogTitleProps {\r\n    id: string;\r\n    children?: React.ReactNode;\r\n    onClose: () => void;\r\n}\r\n\r\nconst BootstrapDialogTitle = (props: DialogTitleProps) => {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n};\r\n\r\ntype CustomizedDialogsAlertPropsType = {\r\n    dialogID: string\r\n    deleteDialog: (dialogID: string) => void\r\n}\r\n\r\nexport default function CustomizedDialogsAlert(props: CustomizedDialogsAlertPropsType) {\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const removeDialog = () => {props.deleteDialog(props.dialogID)}\r\n\r\n    return (\r\n        <div>\r\n            <IconButton onClick={handleClickOpen} edge=\"end\"  color={\"secondary\"}>\r\n                <DeleteForeverIcon/>\r\n            </IconButton>\r\n            <BootstrapDialog\r\n                onClose={handleClose}\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n            >\r\n                <BootstrapDialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n                    Delete all messages\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Typography gutterBottom>\r\n                        Are you sure you want to <b>delete your entire message history</b> with this user?\r\n                    </Typography>\r\n                    <Typography gutterBottom>\r\n                        This can't be undone.\r\n                    </Typography>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant={\"outlined\"} color={\"secondary\"} onClick={removeDialog}>\r\n                        Delete\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {\r\n    Avatar,\r\n    Divider,\r\n    ListItem,\r\n    ListItemAvatar,\r\n    ListItemText,\r\n    ListProps,\r\n    styled,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {currentTime} from \"../../Profile/RightColumn/Posts/Post/Post\";\r\nimport CustomizedDialogsAlert from \"../../../common/Preloader/DialogsAlert/CustomizedDialogsAlert\";\r\nimport {DialogType} from \"../../../redux/dialogs-reducer\";\r\n\r\ntype UserDialogElementPropsType = {\r\n    deleteDialog: (dialogID: string) => void\r\n}\r\n\r\nconst CustomListItem = styled(ListItem)<ListProps>(({theme}) => ({\r\n    '& .MuiListItemSecondaryAction-root': {\r\n        visibility: 'hidden'\r\n    },\r\n    '&:hover': {\r\n        '.MuiListItemSecondaryAction-root': {\r\n            visibility: 'visible'\r\n        }\r\n    }\r\n}))\r\n\r\nfunction UserDialogElement(props: DialogType & UserDialogElementPropsType) {\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <CustomListItem\r\n            secondaryAction={\r\n                    <CustomizedDialogsAlert dialogID={props.id}\r\n                                            deleteDialog={props.deleteDialog}/>\r\n            }\r\n        >\r\n            <NavLink to={`/dialogs/${props.id}`} style={{\r\n                textDecoration: 'none',\r\n                color: 'inherit',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'space-between',\r\n                width: '100%'\r\n            }}>\r\n                <ListItemAvatar>\r\n                    <Avatar\r\n                        alt=\"Tony Stark\"\r\n                        src=\"https://www.seoclerk.com/pics/319222-1IvI0s1421931178.png\"\r\n                        sx={{width: 50, height: 50}}\r\n                    />\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    style={{paddingLeft: '15px'}}\r\n                    primary={props.name}\r\n                    secondary={'Secondary text'}\r\n                />\r\n                <Typography variant={'caption'}>{currentTime()}</Typography>\r\n            </NavLink>\r\n\r\n        </CustomListItem>\r\n            <Divider/>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UserDialogElement;","import React, {useState} from 'react';\r\nimport {\r\n    Divider,\r\n    Grid,\r\n    List, Paper,\r\n} from \"@mui/material\";\r\nimport DialogsHeader from \"./Headers/DialogsHeader\";\r\nimport {DialogsPropsType} from \"./DialogsContainer\";\r\nimport UserDialogElement from \"./UserDialogElement/UserDialogElement\";\r\nimport {styled} from \"@mui/material/styles\";\r\n\r\nconst RootContainer = styled(Grid)({\r\n    height: '90vh ',\r\n    flexDirection: 'column',\r\n    flexWrap: 'nowrap',\r\n    overflow: 'auto',\r\n    overflowY: 'visible',\r\n    '&::-webkit-scrollbar': {\r\n        width: '5px'\r\n    },\r\n    '&::-webkit-scrollbar-thumb': {\r\n        background: '#3f51b5',\r\n        borderRadius: '5px'\r\n    },\r\n});\r\n\r\nfunction Dialogs(props: DialogsPropsType) {\r\n\r\n    const [searchDialogName, setSearchDialogName] = useState('')\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map(d => <UserDialogElement key={d.id}\r\n                                     id={d.id}\r\n                                     name={d.name}\r\n                                     deleteDialog={props.deleteDialog}\r\n            />\r\n        ).filter(d => d.props.name.toLowerCase().includes(searchDialogName.toLowerCase()))\r\n\r\n\r\n\r\n    // if(!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n    return (\r\n        <Grid item xs={12} md={12} lg={9}>\r\n            <Paper elevation={4}>\r\n                <RootContainer>\r\n                    <Grid item>\r\n                        <DialogsHeader setSearchDialogName={setSearchDialogName}/>\r\n                        <Divider/>\r\n                    </Grid>\r\n                    <Grid item wrap={\"nowrap\"}>\r\n                        <List style={{paddingTop: 0}}>\r\n                            {dialogsElements}\r\n                        </List>\r\n                    </Grid>\r\n                </RootContainer>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dialogs\r\n\r\n\r\n","import React from 'react';\r\nimport {\r\n    DeleteDialogCreator,\r\n    DialogPageType,\r\n    sendMessageCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from 'redux';\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype mapStateToPropsType = {\r\n    dialogsPage: DialogPageType\r\n}\r\n\r\ntype mapDispatchPropsType = {\r\n    sendMessage: (newMessText: string) => void\r\n    deleteDialog: (dialogID: string) => void\r\n}\r\n\r\nexport type  DialogsPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) : mapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogPage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMessText: string) => {\r\n           dispatch(sendMessageCreator(newMessText))\r\n        },\r\n        deleteDialog: (dialogID: string) => {\r\n            dispatch(DeleteDialogCreator(dialogID))\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}