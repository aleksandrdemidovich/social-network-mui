{"version":3,"sources":["components/Chat/Chat.tsx"],"names":["Message","React","memo","message","MessageContainer","item","display","flexDirection","alignItems","src","photo","sx","width","height","marginRight","userName","MessageText","Messages","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","ChatArea","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","id","ref","AddMessageForm","setMessage","dispatch","useDispatch","status","style","padding","label","variant","fullWidth","size","onChange","value","disabled","onClick","sendMessage","endIcon","Chat","startMessagesListening","stopMessagesListening","xs","elevation","styled"],"mappings":"8QAmCA,IAAMA,EAAqDC,IAAMC,MAAK,YAAgB,IAAdC,EAAa,EAAbA,QACpE,OACI,eAACC,EAAD,WACI,eAAC,IAAD,CAAMC,MAAI,EAACC,QAAS,OAAQC,cAAe,MAAOC,WAAY,SAA9D,UACI,cAAC,IAAD,CACIC,IAAKN,EAAQO,MACbC,GAAI,CAACC,MAAO,GAAIC,OAAQ,GAAIC,YAAa,UAHjD,IAIO,4BAAIX,EAAQY,cAEnB,cAACC,EAAD,UACKb,EAAQA,UAEb,cAAC,IAAD,UAKNc,EAAqB,WACvB,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,YAC3DI,EAAoBC,iBAAuB,MAFpB,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAoB7B,OANAC,qBAAU,WACa,IAAD,EAAdF,IACA,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACZ,IAEG,eAACa,EAAD,CAAUC,SAfK,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Ef,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAUjC,UACFR,EAASuB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAAC3C,EAAD,CAAoBG,QAASuC,GAAfA,EAAEE,OAC5C,qBAAKC,IAAKvB,QAIZwB,EAA+B,WAAO,IAAD,EACTtB,mBAAS,IADA,mBAChCrB,EADgC,KACvB4C,EADuB,KAEjCC,EAAWC,cAEXC,EAAS/B,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAK6B,UAW/D,OAAO,eAAC,IAAD,CAAM5C,QAAS,OAAQC,cAAe,MAAO4C,MAAO,CAACC,QAAS,OAAQvC,OAAQ,OAA9E,UACH,cAAC,IAAD,CAAWwC,MAAM,UACNC,QAAQ,WACRC,WAAS,EACTC,KAAM,SACNC,SAAU,SAACxB,GAAD,OAAOc,EAAWd,EAAEE,cAAcuB,QAC5CA,MAAOvD,EACPgD,MAAO,CAACrC,YAAa,UAChC,cAAC,IAAD,CAAQ6C,SAAqB,UAAXT,EACVU,QAjBe,WAClBzD,IAGL6C,EAASa,YAAY1D,IACrB4C,EAAW,MAaHO,QAAQ,YACRQ,QAAS,cAAC,IAAD,IACTN,KAAM,SAJd,sBAWOO,UAvGf,WACI,IAAMf,EAAWC,cAEXC,EAAS/B,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAK6B,UAS/D,OAPAvB,qBAAU,WAEN,OADAqB,EAASgB,eACF,WACHhB,EAASiB,kBAEd,CAACjB,IAGA,cAAC,IAAD,CAAM3C,MAAI,EAAC6D,GAAI,GAAf,SACI,eAAC,IAAD,CAAOC,UAAW,EAAlB,UACgB,UAAXjB,GAAsB,8EACvB,sBAAKC,MAAO,CAACvC,MAAO,OAAQC,OAAQ,QAApC,UACI,cAACI,EAAD,IACA,cAAC6B,EAAD,aAuFpB,IAAM1C,EAAmBgE,YAAO,MAAPA,CAAH,uGAKhBrC,EAAWqC,YAAO,MAAPA,CAAH,kTAoBRpD,EAAcoD,YAAO,IAAPA,CAAH","file":"static/js/8.3267ae9a.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {Avatar, Button, Divider, Grid, Paper, styled, TextField} from \"@mui/material\";\nimport {useDispatch, useSelector} from 'react-redux';\nimport {AppStateType} from \"../../redux/redux-store\";\nimport {Send} from \"@mui/icons-material\";\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/chat-reducer\";\nimport {ChatMessageAPIType} from \"../../API/chat-api\";\n\n\nfunction Chat() {\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n    useEffect(() => {\n        dispatch(startMessagesListening())\n        return () => {\n            dispatch(stopMessagesListening())\n        }\n    }, [dispatch])\n\n    return (\n        <Grid item xs={10}>\n            <Paper elevation={2}>\n                {status === 'error' && <div>Some error occured. Please refresh the page</div>}\n                <div style={{width: '100%', height: '85vh'}}>\n                    <Messages/>\n                    <AddMessageForm/>\n                </div>\n            </Paper>\n        </Grid>\n    );\n}\n\n\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\n    return (\n        <MessageContainer>\n            <Grid item display={\"flex\"} flexDirection={\"row\"} alignItems={\"center\"}>\n                <Avatar\n                    src={message.photo}\n                    sx={{width: 36, height: 36, marginRight: '10px'}}\n                /> <b>{message.userName}</b>\n            </Grid>\n            <MessageText>\n                {message.message}\n            </MessageText>\n            <Divider/>\n        </MessageContainer>\n    )\n})\n\nconst Messages: React.FC = () => {\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n        const element = e.currentTarget;\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\n            !isAutoScroll && setIsAutoScroll(true)\n        } else {\n            isAutoScroll && setIsAutoScroll(false)\n        }\n    }\n\n    useEffect(() => {\n        if (isAutoScroll) {\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\n        }\n    }, [messages])\n\n    return <ChatArea onScroll={scrollHandler}>\n        {messages.map((m, index) => <Message key={m.id} message={m}/>)}\n        <div ref={messagesAnchorRef}/>\n    </ChatArea>\n}\n\nconst AddMessageForm: React.FC<{}> = () => {\n    const [message, setMessage] = useState('')\n    const dispatch = useDispatch()\n\n    const status = useSelector((state: AppStateType) => state.chat.status)\n\n\n    const sendMessageHandler = () => {\n        if (!message) {\n            return\n        }\n        dispatch(sendMessage(message))\n        setMessage('')\n    }\n\n    return <Grid display={\"flex\"} flexDirection={\"row\"} style={{padding: '10px', height: '10%'}}>\n        <TextField label=\"Message\"\n                   variant=\"outlined\"\n                   fullWidth\n                   size={\"medium\"}\n                   onChange={(e) => setMessage(e.currentTarget.value)}\n                   value={message}\n                   style={{marginRight: '10px'}}/>\n        <Button disabled={status !== 'ready'}\n                onClick={sendMessageHandler}\n                variant=\"contained\"\n                endIcon={<Send/>}\n                size={\"medium\"}>\n            Send\n        </Button>\n    </Grid>\n}\n\n\nexport default Chat;\n\nconst MessageContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  padding: 10px 10px 0 20px;\n`\nconst ChatArea = styled('div')`\n  height: 90%;\n  overflow-y: auto;\n\n  ::-webkit-scrollbar {\n    width: 5px;\n  }\n\n  ::-webkit-scrollbar-track {\n    background: #f1f1f1;\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: #888;\n  }\n\n  ::-webkit-scrollbar-thumb:hover {\n    background: #555;\n  }\n`\nconst MessageText = styled('p')`\n  margin: 0 0 5px 46px;\n`"],"sourceRoot":""}