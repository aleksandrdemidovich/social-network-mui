{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Profile/RightColumn/UserInfo/ProfileStatus.tsx","components/Profile/RightColumn/UserInfo/UserInfoData.tsx","components/Profile/RightColumn/UserInfo/UserInfoDataForm.tsx","components/Profile/RightColumn/UserInfo/UserInfo.tsx","components/Profile/LeftColumn/ProfileInfo/ProfileInfoData.tsx","components/Profile/LeftColumn/ProfileInfo/ProfileInfoDataForm.tsx","components/Profile/LeftColumn/ProfileInfo/ProfileInfo.tsx","components/Profile/RightColumn/AddPost/AddPost.tsx","components/Profile/RightColumn/AddPost/AddPostContainer.tsx","components/Profile/RightColumn/Posts/Posts.tsx","components/Profile/RightColumn/Posts/PostsContainer.tsx","components/Profile/LeftColumn/Suggestions/Suggestions.tsx","components/Profile/LeftColumn/Suggestions/SuggestionsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","isOwner","Input","style","width","onChange","e","currentTarget","value","placeholder","autoFocus","onBlur","updateStatus","Tooltip","title","placement","StyledStatus","onDoubleClick","marginRight","styled","styles","theme","rootContainer","paddingBottom","userInfoContainer","paddingLeft","userInfoContainerContent","editButton","float","display","userName","padding","statusInput","paddingTop","userPosition","color","fontSize","fontWeight","StyledBadge","Badge","right","top","font","UserInfoData","classes","useClasses","Typography","variant","component","className","profile","fullName","ProfileStatus","invisible","lookingForAJob","badgeContent","lookingForAJobDescription","aboutMe","UserInfoDataForm","dispatch","useDispatch","formik","useFormik","initialValues","validate","values","errors","name","onSubmit","saveProfile","handleSubmit","IconButton","type","flexDirection","alignItems","margin","id","handleChange","checked","Item","Paper","typography","body2","textAlign","palette","text","secondary","borderRadius","backgroundColor","disabled","UserInfo","inProgress","useSelector","app","skills","map","s","Grid","item","container","direction","LinearProgress","spacing","onClick","profileFacebookIcon","paddingRight","profileWebsiteIcon","profileVkontakteIcon","profileTwitterIcon","profileInstagramIcon","profileYouTubeIcon","profileGitHubIcon","profileLinkedInIcon","ProfileInfoData","ListItemButton","StyledListItemIcon","ListItemText","primary","Divider","alt","src","href","contacts","github","target","rel","textDecoration","ListItemIcon","ProfileInfoDataForm","facebook","website","vk","twitter","instagram","youtube","mainLink","ListItem","aria-label","fullWidth","error","ProfileInfo","CustomAvatar","Avatar","height","marginTop","border","setInvisible","length","htmlFor","files","console","log","savePhoto","onMouseEnter","onMouseLeave","overlap","anchorOrigin","vertical","horizontal","photos","large","defaultUserAvatar","Snackbar","open","autoHideDuration","position","bottom","left","Alert","severity","addPostButton","AddPost","loggedUserPhoto","profilePage","flexWrap","charAt","sx","AddPostFormRedux","newPostText","addPost","renderTextField","label","input","meta","touched","invalid","custom","TextField","multiline","maxRows","size","helperText","maxLength50","maxLengthCreator","reduxForm","form","marginLeft","Field","requiredField","Button","AddPostContainer","newMessText","addPostActionCreator","PostContainer","NoPostsContainer","Posts","React","memo","postsElement","posts","p","elevation","Post","message","likeCount","isLiked","deletePost","profilePhotos","marginBottom","PostsContainer","postID","DeletePostCreator","Suggestions","suggestionElements","users","filter","u","followed","slice","xs","wrap","justifyContent","defaultUserPhoto","unfollow","follow","SuggestionsContainer","userId","usersAPI","getUsers","then","data","setUsers","items","this","usersPage","followSuccess","unfollowSuccess","Profile","md","lg","xl","Preloader","ProfileContainer","match","params","authorizedUserId","toString","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","withRouter"],"mappings":"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","file":"static/js/7.886c93f0.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent(props: MapStatePropsType) {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {Input, styled, Tooltip} from \"@mui/material\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks =  (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const onStatusChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    if(!props.isOwner){\r\n        return (\r\n            <div style={{marginRight:'20px'}}>\r\n                {status ? status : 'Set status'}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <Input style={{width: '95%'}} onChange={onStatusChange} placeholder={'Set status'} value={status} autoFocus\r\n                         onBlur={deactivateEditMode}/>\r\n                : <Tooltip title=\"Use double click to change your status\" placement={'bottom-start'}>\r\n                    <StyledStatus onDoubleClick={activateEditMode}>\r\n                        {status ? status : 'Set status'}\r\n                    </StyledStatus>\r\n                </Tooltip>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileStatusWithHooks;\r\n\r\nconst StyledStatus = styled('div')`\r\n  margin-right: 20px;\r\n  :hover{\r\n    background-color: gray;\r\n    opacity: 0.3;\r\n  }\r\n`","import React from 'react';\r\nimport {Badge, BadgeProps, styled, Typography} from \"@mui/material\";\r\nimport ProfileStatus from \"./ProfileStatus\";\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {UserInfoPropsType} from \"./UserInfo\";\r\n\r\n\r\nconst styles = (theme: any) => ({\r\n    rootContainer: {\r\n        paddingBottom: '20px'\r\n    },\r\n    userInfoContainer: {\r\n        paddingLeft: '20px',\r\n    },\r\n    userInfoContainerContent: {\r\n        width: '100%',\r\n    },\r\n    editButton: {\r\n        float: 'right', display: 'inline'\r\n    },\r\n    userName: {\r\n        padding: '20px 20px 0 0'\r\n    },\r\n    statusInput: {\r\n        width: '97%', paddingTop: '-10px'\r\n    },\r\n    userPosition: {\r\n        color: '#686868', fontSize: '16px', fontWeight: 700,\r\n    },\r\n\r\n});\r\nconst StyledBadge = styled(Badge)<BadgeProps>(({theme}) => ({\r\n    '& .MuiBadge-badge': {\r\n        right: -59,\r\n        top: 7,\r\n        padding: '0 4px',\r\n        font: 'italic 0.9em \"Fira Sans\", serif'\r\n    },\r\n}));\r\n\r\n\r\nfunction UserInfoData(props: UserInfoPropsType) {\r\n    const classes = useClasses(styles);\r\n\r\n    return (\r\n        <>\r\n            <Typography variant=\"h6\" fontWeight={\"bold\"} component=\"h1\" className={classes.userName}>\r\n                {props.profile.fullName}\r\n            </Typography>\r\n            <ProfileStatus status={props.status}\r\n                           isOwner = {props.isOwner}\r\n                           updateStatus={props.updateStatus}/>\r\n            {/*<Input disableUnderline value={props.profile.aboutMe ? props.profile.aboutMe : '' } placeholder=\"Set status\" className={classes.statusInput}/>*/}\r\n            <StyledBadge invisible={!props.profile.lookingForAJob} badgeContent={'Open to work'}\r\n                         color=\"success\">\r\n                        <span className={classes.userPosition}>\r\n                            {props.profile.lookingForAJobDescription ? props.profile.lookingForAJobDescription : 'default description'}\r\n                        </span>\r\n            </StyledBadge>\r\n            <div><b>About me</b>: {props.profile.aboutMe}</div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default UserInfoData;\r\n","import React from 'react';\r\nimport {UserInfoPropsType} from \"./UserInfo\";\r\nimport {useFormik} from \"formik\";\r\nimport DoneIcon from \"@mui/icons-material/Done\";\r\nimport {IconButton, Input, Tooltip} from \"@mui/material\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {saveProfile} from \"../../../../redux/profile-reducer\";\r\n\r\ntype FormikErrorType = {\r\n    name?: string\r\n}\r\ntype ProfileDataFormType = {\r\n    setEditMode: any\r\n}\r\n\r\n\r\n\r\nfunction UserInfoDataForm(props: UserInfoPropsType & ProfileDataFormType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const closeEditMode = () => {\r\n        props.setEditMode(false)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            fullName: props.profile.fullName,\r\n            status: props.status,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            aboutMe: props.profile.aboutMe,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.fullName) {\r\n                errors.name = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(saveProfile(values))\r\n            closeEditMode()\r\n        },\r\n    })\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Tooltip title={'Save changes'}>\r\n                <IconButton style={{float: 'right', display: 'inline'}}\r\n                            type={\"submit\"}\r\n                            color={\"success\"}>\r\n                    <DoneIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n            <div style={{display: 'flex', flexDirection: 'column', paddingTop: '20px', width: '70%'}}>\r\n                <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                    <p style={{width: '160px', margin: 0}}>Full name: </p>\r\n                    <Input id=\"fullName\"\r\n                           name=\"fullName\"\r\n                           type=\"text\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.fullName}\r\n                           placeholder=\"Name\"\r\n                           style={{width: '300px'}}\r\n                    /></div>\r\n                <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                    <p style={{width: '160px', margin: 0}}>Status: </p>\r\n                    <Input id=\"status\"\r\n                           name=\"status\"\r\n                           type=\"text\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.status}\r\n                           placeholder=\"Status\"\r\n                           style={{width: '300px'}}\r\n                    /></div>\r\n                <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                    <p style={{width: '160px', margin: 0}}>Looking for a job?: </p>\r\n                    <input id=\"lookingForAJob\"\r\n                           name=\"lookingForAJob\"\r\n                           type=\"checkbox\"\r\n                           onChange={formik.handleChange}\r\n                           checked={formik.values.lookingForAJob}\r\n                    />{formik.values.lookingForAJob ? \" Yes\" : \" No\"}</div>\r\n                <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                    <p style={{width: '160px', margin: 0}}>Looking for a job description: </p>\r\n                    <Input id=\"lookingForAJobDescription\"\r\n                           name=\"lookingForAJobDescription\"\r\n                           type=\"input\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.lookingForAJobDescription}\r\n                           style={{width: '300px'}}\r\n                    /></div>\r\n                <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>\r\n                    <p style={{width: '160px', margin: 0}}>About me?: </p>\r\n                    <Input id=\"aboutMe\"\r\n                           name=\"aboutMe\"\r\n                           type=\"text\"\r\n                           onChange={formik.handleChange}\r\n                           value={formik.values.aboutMe}\r\n                           placeholder=\"About Me\"\r\n                           style={{width: '300px'}}\r\n                    /></div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default UserInfoDataForm;\r\n","import React, {useState} from 'react';\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport {Badge, BadgeProps, Grid, IconButton, LinearProgress, Paper, styled, Tooltip, Typography} from \"@mui/material\";\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport UserInfoData from \"./UserInfoData\";\r\nimport UserInfoDataForm from \"./UserInfoDataForm\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\n\r\nconst Item = styled(Paper)(({theme}) => ({\r\n    ...theme.typography.body2,\r\n    textAlign: 'center',\r\n    color: theme.palette.text.secondary,\r\n    borderRadius: '30px',\r\n    backgroundColor: theme.palette.text.disabled,\r\n    padding: '4px 10px 4px 10px'\r\n}));\r\nconst styles = (theme: any) => ({\r\n    rootContainer: {\r\n        paddingBottom: '20px'\r\n    },\r\n    userInfoContainer: {\r\n        paddingLeft: '20px',\r\n    },\r\n    userInfoContainerContent: {\r\n        width: '100%',\r\n    },\r\n    editButton: {\r\n        float: 'right', display: 'inline'\r\n    },\r\n    userName: {\r\n        padding: '20px 20px 0 0'\r\n    },\r\n    statusInput: {\r\n        width: '97%', paddingTop: '-10px'\r\n    },\r\n    userPosition: {\r\n        color: '#686868', fontSize: '16px', fontWeight: 700,\r\n    },\r\n\r\n});\r\n\r\nexport type UserInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n}\r\n\r\nfunction UserInfo(props: UserInfoPropsType) {\r\n\r\n    const inProgress = useSelector<AppStateType, boolean>(state => state.app.inProgress)\r\n\r\n    const skills = [\"HTML\", \"CSS\", \"JS\", \"ReactJS\", \"TypeScript\", \"Redux\", \"Git\", \"Yarn\", \"Webpack\"].map(s => {\r\n        return (<Grid item>\r\n            <Item>{s}</Item>\r\n        </Grid>)\r\n    })\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const classes = useClasses(styles);\r\n\r\n    return (\r\n        <Grid container item direction={\"column\"} className={classes.rootContainer}>\r\n            {inProgress && <LinearProgress/>}\r\n            <Grid container item spacing={2} direction={\"row\"} className={classes.userInfoContainer}>\r\n                <Grid item className={classes.userInfoContainerContent}>\r\n                    {props.isOwner && <Tooltip title={editMode ? \"Close\" : \"Change your profile information\"}>\r\n                        {!editMode ?\r\n                            <IconButton className={classes.editButton} onClick={() => setEditMode(true)}\r\n                                        color={\"primary\"}>\r\n                                <EditOutlinedIcon/>\r\n                            </IconButton>\r\n                            : <IconButton className={classes.editButton} onClick={() => setEditMode(false)}\r\n                                          color={\"error\"}>\r\n                                <CloseIcon/>\r\n                            </IconButton>}\r\n                    </Tooltip>}\r\n                    {editMode\r\n                        ? <UserInfoDataForm profile={props.profile}\r\n                                            status={props.status}\r\n                                            updateStatus={props.updateStatus}\r\n                                            isOwner={props.isOwner}\r\n                                            setEditMode={setEditMode}/>\r\n                        : <UserInfoData profile={props.profile}\r\n                                        status={props.status}\r\n                                        updateStatus={props.updateStatus}\r\n                                        isOwner={props.isOwner}/>}\r\n                </Grid>\r\n                {skills}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default UserInfo;\r\n\r\n","import React from 'react';\r\nimport FacebookIcon from '@mui/icons-material/Facebook';\r\nimport LanguageIcon from '@mui/icons-material/Language';\r\nimport InstagramIcon from '@mui/icons-material/Instagram';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\r\nimport TwitterIcon from '@mui/icons-material/Twitter';\r\nimport {\r\n    Divider,\r\n    Grid,\r\n    styled\r\n} from \"@mui/material\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport ListItemButton from \"@mui/material/ListItemButton\";\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\n\r\n\r\n\r\n\r\n\r\nconst styles = (theme: any) => ({\r\n    editButton: {\r\n        float: 'right', display: 'inline'\r\n    },\r\n    profileFacebookIcon: {\r\n        paddingRight: '10px', color: '#4267B2',\r\n    },\r\n    profileWebsiteIcon: {\r\n        paddingRight: '10px', width: '40px'\r\n    },\r\n    profileVkontakteIcon: {\r\n        width: '40px', paddingRight: '15px', paddingBottom: 0\r\n    },\r\n    profileTwitterIcon: {\r\n        paddingRight: '10px', color: '#1DA1F2',\r\n    },\r\n    profileInstagramIcon: {\r\n        paddingRight: '10px', color: '#8a3ab9',\r\n    },\r\n    profileYouTubeIcon: {\r\n        paddingRight: '10px', color: '#FF0000',\r\n    },\r\n    profileGitHubIcon: {\r\n        paddingRight: '10px', color: '#4078c0',\r\n    },\r\n    profileLinkedInIcon: {\r\n        paddingRight: '10px', color: '#0077b5',\r\n    },\r\n\r\n});\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nfunction ProfileInfoData(props: ProfileInfoPropsType) {\r\n\r\n    const classes = useClasses(styles);\r\n\r\n\r\n    return (\r\n        <Grid container item direction={\"column\"}>\r\n            <Grid item>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <FacebookIcon fontSize={\"large\"} className={classes.profileFacebookIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"Facebook\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <LanguageIcon fontSize={\"large\"} className={classes.profileWebsiteIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"Website\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <i style={{padding: '2px'}}>\r\n                            <img alt='vk img' src='https://upload.wikimedia.org/wikipedia/commons/2/21/VK.com-logo.svg'\r\n                                 className={classes.profileVkontakteIcon}/>\r\n                        </i>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"VK\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <TwitterIcon fontSize={\"large\"} className={classes.profileTwitterIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"Twitter\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <InstagramIcon fontSize={\"large\"} className={classes.profileInstagramIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"Instagram\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <ListItemButton>\r\n                    <StyledListItemIcon>\r\n                        <YouTubeIcon fontSize={\"large\"} className={classes.profileYouTubeIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"YouTube\"/>\r\n                </ListItemButton>\r\n                <Divider/>\r\n                <a href={props.profile.contacts.github} target={'_blank'} rel=\"noreferrer\" style={{textDecoration: 'none', color:'inherit'}}>\r\n                <ListItemButton href={props.profile.contacts.github}>\r\n                    <StyledListItemIcon>\r\n                        <GitHubIcon fontSize={\"large\"} className={classes.profileGitHubIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"GitHub\"/>\r\n                </ListItemButton>\r\n                </a>\r\n                <Divider/>\r\n                <ListItemButton href={props.profile.contacts.github}>\r\n                    <StyledListItemIcon>\r\n                        <LinkedInIcon fontSize={\"large\"} className={classes.profileLinkedInIcon}/>\r\n                    </StyledListItemIcon>\r\n                    <ListItemText primary=\"LinkedIn\"/>\r\n                </ListItemButton>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ProfileInfoData;\r\n\r\nconst StyledListItemIcon = styled(ListItemIcon)`\r\n  min-width: 40px;\r\n  color: #3f51b5;\r\n`","import React from 'react';\r\nimport FacebookIcon from '@mui/icons-material/Facebook';\r\nimport LanguageIcon from '@mui/icons-material/Language';\r\nimport InstagramIcon from '@mui/icons-material/Instagram';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport GitHubIcon from '@mui/icons-material/GitHub';\r\nimport LinkedInIcon from '@mui/icons-material/LinkedIn';\r\nimport TwitterIcon from '@mui/icons-material/Twitter';\r\nimport {\r\n    Divider,\r\n    Grid, IconButton,\r\n    Input, ListItem,\r\n    styled, Tooltip,\r\n} from \"@mui/material\";\r\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {ProfileType, saveProfile} from \"../../../../redux/profile-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {useFormik} from \"formik\";\r\nimport DoneIcon from \"@mui/icons-material/Done\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\n\r\ntype FormikErrorType = {\r\n    github?: string\r\n}\r\n\r\nconst styles = (theme: any) => ({\r\n    editButton: {\r\n        float: 'right', display: 'inline'\r\n    },\r\n    profileFacebookIcon: {\r\n        paddingRight: '10px', color: '#4267B2',\r\n    },\r\n    profileWebsiteIcon: {\r\n        paddingRight: '10px', width: '40px'\r\n    },\r\n    profileVkontakteIcon: {\r\n        width: '40px', paddingRight: '15px', paddingBottom: 0\r\n    },\r\n    profileTwitterIcon: {\r\n        paddingRight: '10px', color: '#1DA1F2',\r\n    },\r\n    profileInstagramIcon: {\r\n        paddingRight: '10px', color: '#8a3ab9',\r\n    },\r\n    profileYouTubeIcon: {\r\n        paddingRight: '10px', color: '#FF0000',\r\n    },\r\n    profileGitHubIcon: {\r\n        paddingRight: '10px', color: '#4078c0',\r\n    },\r\n    profileLinkedInIcon: {\r\n        paddingRight: '10px', color: '#0077b5',\r\n    },\r\n\r\n});\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    editMode: boolean\r\n    setEditMode: any\r\n}\r\n\r\nfunction ProfileInfoDataForm(props: ProfileInfoPropsType) {\r\n\r\n    const classes = useClasses(styles);\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const closeEditMode = () => {\r\n        props.setEditMode(false)\r\n    }\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            facebook: props.profile.contacts.facebook,\r\n            website: props.profile.contacts.website,\r\n            vk: props.profile.contacts.vk,\r\n            twitter: props.profile.contacts.twitter,\r\n            instagram: props.profile.contacts.instagram,\r\n            youtube: props.profile.contacts.youtube,\r\n            github: props.profile.contacts.github,\r\n            mainLink: props.profile.contacts.mainLink,\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.github) {\r\n                errors.github = 'Required';\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(saveProfile({...props.profile, contacts:values}))\r\n            closeEditMode()\r\n        }\r\n    })\r\n\r\n\r\n\r\n\r\n    return (\r\n        <form onSubmit={formik.handleSubmit}>\r\n            <Tooltip title={'Save changes'}>\r\n                <IconButton style={{float: 'right', display: 'inline'}}\r\n                            type={\"submit\"}\r\n                            color={\"success\"}>\r\n                    <DoneIcon/>\r\n                </IconButton>\r\n            </Tooltip>\r\n        <Grid container item direction={\"column\"}>\r\n            <Grid item>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <FacebookIcon fontSize={\"large\"} className={classes.profileFacebookIcon}/>\r\n                        {props.editMode && <Input id=\"facebook\"\r\n                                                  aria-label={'qwe'}\r\n                                                  name=\"facebook\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.facebook}\r\n                                                  placeholder=\"Facebook\"/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <LanguageIcon fontSize={\"large\"} className={classes.profileWebsiteIcon}/>\r\n                        {props.editMode && <Input id=\"website\"\r\n                                                  name=\"website\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.website}\r\n                                                  placeholder=\"Website\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <i style={{padding: '2px'}}>\r\n                            <img alt='vk img' src='https://upload.wikimedia.org/wikipedia/commons/2/21/VK.com-logo.svg'\r\n                                 className={classes.profileVkontakteIcon}/>\r\n                        </i>\r\n                        {props.editMode && <Input id=\"vk\"\r\n                                                  name=\"vk\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.vk}\r\n                                                  placeholder=\"VK\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <TwitterIcon fontSize={\"large\"} className={classes.profileTwitterIcon}/>\r\n                        {props.editMode && <Input id=\"twitter\"\r\n                                                  name=\"twitter\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.twitter}\r\n                                                  placeholder=\"Twitter\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <InstagramIcon fontSize={\"large\"} className={classes.profileInstagramIcon}/>\r\n                        {props.editMode && <Input id=\"instagram\"\r\n                                                  name=\"instagram\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.instagram}\r\n                                                  placeholder=\"Instagram\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <YouTubeIcon fontSize={\"large\"} className={classes.profileYouTubeIcon}/>\r\n                        {props.editMode && <Input id=\"youtube\"\r\n                                                  name=\"youtube\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.youtube}\r\n                                                  placeholder=\"YouTube\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <GitHubIcon fontSize={\"large\"} className={classes.profileGitHubIcon}/>\r\n                        {props.editMode && <Input id=\"github\"\r\n                                                  name=\"github\"\r\n                                                  type=\"text\"\r\n                                                  error={!!formik.errors.github}\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.github}\r\n                                                  placeholder=\"Github\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n                <Divider/>\r\n                <ListItem>\r\n                    <StyledListItemIcon>\r\n                        <LinkedInIcon fontSize={\"large\"} className={classes.profileLinkedInIcon}/>\r\n                        {props.editMode && <Input id=\"mainLink\"\r\n                                                  name=\"mainLink\"\r\n                                                  type=\"text\"\r\n                                                  onChange={formik.handleChange}\r\n                                                  value={formik.values.mainLink}\r\n                                                  placeholder=\"LinkedIn\" fullWidth/>}\r\n                    </StyledListItemIcon>\r\n\r\n                </ListItem>\r\n            </Grid>\r\n        </Grid>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default ProfileInfoDataForm;\r\n\r\nconst StyledListItemIcon = styled(ListItemIcon)`\r\n  min-width: 40px;\r\n  color: #3f51b5;\r\n`","import React, {useState} from 'react';\r\nimport {\r\n    Alert,\r\n    Avatar,\r\n    AvatarProps,\r\n    Badge,\r\n    BadgeProps,\r\n    Divider,\r\n    Grid,\r\n    IconButton,\r\n    Input,\r\n    LinearProgress, Snackbar,\r\n    styled,\r\n    Tooltip\r\n} from \"@mui/material\";\r\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {ProfileType} from \"../../../../redux/profile-reducer\";\r\nimport defaultUserAvatar from '../../../../assets/images/userAvatar.jpg'\r\nimport CameraAltIcon from '@mui/icons-material/CameraAlt';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport ProfileInfoData from \"./ProfileInfoData\";\r\nimport ProfileInfoDataForm from \"./ProfileInfoDataForm\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\n\r\n\r\nconst StyledBadge = styled(Badge)<BadgeProps>(({theme}) => ({\r\n    '& .MuiBadge-badge': {\r\n        right: 27,\r\n        top: 25,\r\n        padding: '0 4px',\r\n        font: 'italic 0.9em \"Fira Sans\", serif'\r\n    },\r\n}));\r\n\r\nconst styles = (theme: any) => ({\r\n    editButton: {\r\n        float: 'right', display: 'inline'\r\n    },\r\n    profileFacebookIcon: {\r\n        paddingRight: '10px', color: '#4267B2',\r\n    },\r\n    profileWebsiteIcon: {\r\n        paddingRight: '10px', width: '40px'\r\n    },\r\n    profileVkontakteIcon: {\r\n        width: '40px', paddingRight: '15px', paddingBottom: 0\r\n    },\r\n    profileTwitterIcon: {\r\n        paddingRight: '10px', color: '#1DA1F2',\r\n    },\r\n    profileInstagramIcon: {\r\n        paddingRight: '10px', color: '#8a3ab9',\r\n    },\r\n    profileYouTubeIcon: {\r\n        paddingRight: '10px', color: '#FF0000',\r\n    },\r\n    profileGitHubIcon: {\r\n        paddingRight: '10px', color: '#4078c0',\r\n    },\r\n    profileLinkedInIcon: {\r\n        paddingRight: '10px', color: '#0077b5',\r\n    },\r\n\r\n});\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    savePhoto: (file: File) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoPropsType) {\r\n    const CustomAvatar = styled(Avatar)<AvatarProps>(({theme}) => ({\r\n        width: 250,\r\n        height: 250,\r\n        margin: 'auto',\r\n        marginTop: props.isOwner ?  '-25px' : '20px',\r\n        border: '3px solid transparent',\r\n    }));\r\n    const classes = useClasses(styles);\r\n\r\n    const inProgress = useSelector<AppStateType, boolean>(state => state.app.inProgress)\r\n    const error = useSelector<AppStateType, string>(state => state.app.error)\r\n\r\n    const [invisible, setInvisible] = useState(true)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [openSnackBar, setOpenSnackBar] = useState<boolean>(error.length > 1)\r\n\r\n\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            console.log(e.target.files[0])\r\n            props.savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container item direction={\"column\"}>\r\n\r\n            {inProgress && <LinearProgress/>}\r\n            {props.isOwner && <Grid item>\r\n                <Tooltip title={editMode? \"Close edit mode\" : \"Change your social networks links\"}>\r\n                    {!editMode ?\r\n                        <IconButton className={classes.editButton} onClick={() => setEditMode(true)}\r\n                                    color={\"primary\"}>\r\n                            <EditOutlinedIcon/>\r\n                        </IconButton>\r\n                        : <IconButton className={classes.editButton} onClick={() => setEditMode(false)}\r\n                                      color={\"error\"}>\r\n                            <CloseIcon/>\r\n                        </IconButton>}\r\n                </Tooltip>\r\n            </Grid>}\r\n            <Grid item style={{margin: 'auto'}}>\r\n\r\n                <StyledBadge\r\n                    badgeContent={\r\n                        <Tooltip title=\"Update photo\">\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <Input id=\"icon-button-file\" type=\"file\" onChange={onMainPhotoSelected}\r\n                                       style={{display: 'none'}}/>\r\n                                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                    <CameraAltIcon fontSize={\"large\"}/>\r\n                                </IconButton>\r\n                            </label>\r\n                        </Tooltip>\r\n                    }\r\n                    invisible={invisible}\r\n                    onMouseEnter={() => setInvisible(!props.isOwner)}\r\n                    onMouseLeave={() => setInvisible(true)}\r\n                    overlap=\"circular\"\r\n                    anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n                >\r\n                    <CustomAvatar alt='avatar'\r\n                                  src={props.profile.photos.large ? props.profile.photos.large : defaultUserAvatar}/>\r\n                </StyledBadge>\r\n\r\n\r\n            </Grid>\r\n\r\n            {!editMode\r\n                ? <ProfileInfoData profile={props.profile}/>\r\n                : <ProfileInfoDataForm editMode={editMode} setEditMode={setEditMode} profile={props.profile}/>}\r\n\r\n\r\n            <Snackbar open={error.length > 1} autoHideDuration={3000}\r\n                      style={{position: 'absolute', bottom: 10, left: 10}} >\r\n                <Alert severity=\"error\">\r\n                    {error}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n","import React from 'react';\r\nimport {Avatar, Button, Grid, TextField} from \"@mui/material\";\r\nimport {AddPostPropsType} from \"./AddPostContainer\";\r\nimport useClasses from \"../../../../customHookCSS/useClasses\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../../utils/validators/validators\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\n\r\nconst styles = (theme: any) => ({\r\n    rootContainer: {\r\n        padding:'20px',\r\n    },\r\n    addPostButton: {\r\n        float: 'right'\r\n    }\r\n});\r\n\r\nfunction AddPost(props: AddPostPropsType) {\r\n\r\n    const classes = useClasses(styles);\r\n\r\n    const loggedUserPhoto = useSelector<AppStateType, string>(state => state.profilePage.loggedUserPhoto)\r\n    // const idAuthUser = useSelector<AppStateType, number>(state => state.auth.id!)\r\n    // const currentProfileId = useSelector<AppStateType, number>(state => state.profilePage.profile.userId!)\r\n\r\n\r\n    // const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n    //     if (e.charCode === 13 && props.newPostText.trim() !== '') {\r\n    //         e.preventDefault()\r\n    //         props.addPost(props.newPostText)\r\n    //     } else if(props.newPostText.trim() === '' && e.charCode === 13) {\r\n    //         e.preventDefault()\r\n    //         setError(true)\r\n    //     }\r\n    // }\r\n\r\n    //todo types\r\n    const addNewPost = (values: any) => {\r\n        if(values.newPostText){\r\n            props.addPost(values.newPostText)\r\n            values.newPostText = ''\r\n        } else return\r\n    }\r\n\r\n    return (\r\n        <Grid container item display={\"flex\"} direction={\"row\"} flexWrap={\"nowrap\"} className={classes.rootContainer}>\r\n            <Avatar\r\n                alt={props.profilePage.profile.fullName.charAt(0)}\r\n                src={loggedUserPhoto}\r\n                sx={{width: 50, height: 50}}\r\n            />\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n        </Grid>\r\n\r\n    );\r\n}\r\n\r\nexport default AddPost;\r\n\r\n\r\n//@ts-ignore\r\nconst renderTextField = ({label, input, meta: {touched, invalid, error}, ...custom}) => (\r\n    <TextField\r\n        id=\"outlined-multiline-flexible\"\r\n        label={\"What's new?\"}\r\n        multiline\r\n        maxRows={3}\r\n        error={touched && invalid}\r\n        fullWidth\r\n        size={\"small\"}\r\n        {...input}\r\n        {...custom}\r\n        helperText={touched && error}\r\n    />\r\n)\r\n\r\nlet maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddNewPostForm = (props: any) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} style={{display:'flex', flexDirection:'row', width:'100%', alignItems:'center', marginLeft:'10px'}}>\r\n            <Field component={renderTextField}\r\n                   name={'newPostText'}\r\n                   validate={[requiredField,maxLength50]}\r\n            />\r\n            <Button style={{marginLeft:'10px'}}\r\n                variant=\"contained\"\r\n                    type={\"submit\"}>\r\n                Post\r\n            </Button>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import {addPostActionCreator, ProfilePageType} from \"../../../../redux/profile-reducer\";\r\nimport AddPost from \"./AddPost\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    profilePage: ProfilePageType\r\n}\r\ntype mapDispatchPropsType = {\r\n    addPost: (newMessText: string) => void\r\n}\r\n\r\nexport type  AddPostPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\r\n    return {\r\n        addPost: (newMessText: string) => {\r\n            dispatch(addPostActionCreator(newMessText))\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst AddPostContainer = connect(mapStateToProps, mapDispatchToProps)(AddPost)\r\n\r\nexport default AddPostContainer;\r\n","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport {Divider, Grid, Paper} from \"@mui/material\";\r\nimport {styled} from '@mui/material/styles';\r\nimport DescriptionOutlinedIcon from '@mui/icons-material/DescriptionOutlined';\r\nimport {PostsPropsType} from \"./PostsContainer\";\r\nimport Typography from \"@mui/material/Typography\";\r\n\r\n\r\nconst PostContainer = styled(Grid)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n  align-items: stretch;\r\n`;\r\nconst NoPostsContainer = styled(Grid)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  flex-wrap: nowrap;\r\n  align-items: stretch;\r\n\r\n  & svg {\r\n    color: gray;\r\n    font-size: 130px;\r\n  }\r\n;\r\n`;\r\n\r\nconst Posts = React.memo((props: PostsPropsType) => {\r\n\r\n\r\n    const postsElement = props.posts.map(p =>\r\n        <PostContainer container item key={p.id}>\r\n            <Paper elevation={4}>\r\n                <Post key={p.id}\r\n                      id={p.id}\r\n                      message={p.message}\r\n                      likeCount={p.likeCount}\r\n                      isLiked={p.isLiked}\r\n                      deletePost={props.deletePost}\r\n                      photos={props.profilePhotos}\r\n                      userName={props.userName}\r\n                />\r\n            </Paper>\r\n        </PostContainer>\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {props.posts.length === 0\r\n                ? <NoPostsContainer container item>\r\n                    <Paper elevation={4}>\r\n                        <Grid item style={{padding: '20px'}}>\r\n                            <Typography>No post yet</Typography>\r\n                        </Grid>\r\n                        <Divider/>\r\n                        <Grid item style={{padding: '20px'}} display={\"flex\"} flexDirection={\"column\"}\r\n                              alignItems={\"center\"}>\r\n                            <DescriptionOutlinedIcon style={{marginBottom: '20px'}}/>\r\n                            <Typography variant={\"body2\"}>There are no posts here yet</Typography>\r\n                        </Grid>\r\n                    </Paper>\r\n                </NoPostsContainer>\r\n                : postsElement}\r\n\r\n        </>\r\n    );\r\n})\r\n\r\nexport default Posts;\r\n","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport Posts from \"./Posts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {DeletePostCreator, PostType} from \"../../../../redux/profile-reducer\";\r\nimport {PhotosType} from \"../../../../redux/users-reducer\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostType>\r\n    profilePhotos: PhotosType\r\n    userName: string\r\n}\r\ntype mapDispatchPropsType = {\r\n    deletePost: (postID: string) => void\r\n}\r\n\r\nexport type  PostsPropsType = mapStateToPropsType & mapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        profilePhotos: state.profilePage.profile.photos,\r\n        userName: state.profilePage.profile.fullName\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):mapDispatchPropsType => {\r\n    return {\r\n        deletePost: (postID: string) => {\r\n            dispatch(DeletePostCreator(postID))\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)\r\n\r\nexport default PostsContainer;","import React from 'react';\r\nimport {Avatar, Button, Divider, Grid, IconButton, Typography} from \"@mui/material\";\r\nimport IndeterminateCheckBoxOutlinedIcon from '@mui/icons-material/IndeterminateCheckBoxOutlined';\r\nimport AddBoxOutlinedIcon from '@mui/icons-material/AddBoxOutlined';\r\nimport {NavLink} from 'react-router-dom';\r\nimport defaultUserPhoto from '../../../../assets/images/userAvatar.jpg'\r\nimport {UserType} from \"../../../../redux/users-reducer\";\r\n\r\n\r\ntype SuggestionPropsType = {\r\n    users: Array<UserType>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nfunction Suggestions (props: SuggestionPropsType) {\r\n\r\n        const top6Users = props.users.filter(u => !u.followed).slice(0,6)\r\n\r\n        const suggestionElements = top6Users.map(s => {\r\n            return <Grid item key={s.id}>\r\n                <Grid container xs={12} item spacing={2} direction={\"row\"} wrap={\"nowrap\"}\r\n                      justifyContent={'flex-start'}>\r\n                    <Grid item style={{marginLeft: '20px'}}>\r\n                        <Avatar\r\n                            alt=\"Remy Sharp\"\r\n                            src={s.photos.large !== null ? s.photos.large : defaultUserPhoto}\r\n                            sx={{width: 48, height: 48}}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"subtitle2\" component=\"h1\" style={{paddingBottom: 0}}>\r\n                            {s.name}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\">\r\n                            {s.status === null ? 'default status' : s.status }\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item style={{marginLeft: 'auto'}}>\r\n                        {s.followed ?\r\n                            <IconButton aria-label=\"delete\" size=\"large\"\r\n                                        onClick={() => props.unfollow(s.id)}><IndeterminateCheckBoxOutlinedIcon\r\n                                fontSize=\"inherit\"\r\n                                color={\"secondary\"}/></IconButton>\r\n                            : <IconButton aria-label=\"delete\" size=\"large\"\r\n                                          onClick={() => props.follow(s.id)}><AddBoxOutlinedIcon\r\n                                fontSize=\"inherit\" color={\"success\"}/></IconButton>}\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        })\r\n\r\n        return (\r\n            <Grid container item spacing={2} direction={\"column\"}>\r\n                <Grid item>\r\n                    <Typography variant=\"h6\" component=\"h1\" style={{fontWeight: 'bold',  paddingBottom: '10px',\r\n                        paddingLeft: '20px',}}>\r\n                        Suggestions\r\n                    </Typography>\r\n                    <Divider/>\r\n                </Grid>\r\n                {suggestionElements}\r\n                <Grid item style={{margin: 'auto', paddingTop: 0, width: '100%'}}>\r\n                    <NavLink to=\"/users\" style={{textDecoration: 'none', color: 'inherit'}} >\r\n                        <Button fullWidth variant={\"text\"} color={\"secondary\"}>view more</Button>\r\n                    </NavLink>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        );\r\n    }\r\n\r\n\r\nexport default Suggestions;\r\n","import React from 'react';\r\nimport {AppStateType} from \"../../../../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    followSuccess, setUsers,\r\n    unfollowSuccess,\r\n    UserType\r\n} from \"../../../../redux/users-reducer\";\r\nimport Suggestions from \"./Suggestions\";\r\nimport {usersAPI} from \"../../../../API/api\";\r\n\r\n\r\ntype mapStateToPropsType = {\r\n    users: Array<UserType>\r\n}\r\ntype mapDispatchPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    setUsers: (users: Array<UserType>) => void\r\n}\r\nexport type  SuggestionsPropsType = mapStateToPropsType & mapDispatchPropsType\r\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        users: state.usersPage.users\r\n    }\r\n}\r\n\r\n\r\nclass SuggestionsContainer extends React.Component<SuggestionsPropsType> {\r\n    componentDidMount() {\r\n        usersAPI.getUsers(1, 30, false).then(data => {\r\n                this.props.setUsers(data.items)\r\n            });\r\n    }\r\n\r\n    follow = (userId: number) => {\r\n        this.props.follow(userId)\r\n    }\r\n    unfollow = (userId: number) => {\r\n        this.props.unfollow(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Suggestions users={this.props.users}\r\n                            follow={this.props.follow}\r\n                            unfollow={this.props.unfollow}\r\n        />\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, {follow: followSuccess, unfollow: unfollowSuccess, setUsers})(SuggestionsContainer)\r\n","import React from 'react';\r\nimport {\r\n    Grid,\r\n    Paper,\r\n\r\n} from \"@mui/material\";\r\nimport UserInfo from \"./RightColumn/UserInfo/UserInfo\";\r\nimport ProfileInfo from \"./LeftColumn/ProfileInfo/ProfileInfo\";\r\nimport AddPostContainer from \"./RightColumn/AddPost/AddPostContainer\";\r\nimport PostsContainer from \"./RightColumn/Posts/PostsContainer\";\r\nimport SuggestionsContainer from \"./LeftColumn/Suggestions/SuggestionsContainer\";\r\nimport {ProfilePropsType} from \"./ProfileContainer\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n    if (!props.profile.fullName) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Grid container\r\n                  direction={\"column\"}\r\n                  md={4} lg={5} xl={4}\r\n                  item\r\n                  spacing={4}>\r\n                <Grid item>\r\n                    <Paper elevation={4}>\r\n                        <ProfileInfo profile={props.profile}\r\n                                     isOwner={props.isOwner}\r\n                                     savePhoto={props.savePhoto}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Paper elevation={4}>\r\n                        <SuggestionsContainer/>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container\r\n                  md={8} lg={9} xl={9}\r\n                  item\r\n                  spacing={4} direction={\"column\"}\r\n                  marginBottom={'10px'}\r\n                  flexWrap={\"nowrap\"}>\r\n                <Grid item>\r\n                    <Paper elevation={4}>\r\n                        <UserInfo profile={props.profile}\r\n                                  status={props.status}\r\n                                  updateStatus={props.updateStatus}\r\n                                  isOwner={props.isOwner}/>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Paper elevation={4}>\r\n                        <AddPostContainer/>\r\n                    </Paper>\r\n                </Grid>\r\n                <PostsContainer/>\r\n            </Grid>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatus, getUserProfile, ProfileType, savePhoto, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\ntype mapStateToPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number\r\n    isOwner: boolean\r\n}\r\ntype mapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatus: (userId: string) => void\r\n    updateStatus: (status: string) => void\r\n    savePhoto: (file: File) => void\r\n}\r\nexport type  ProfilePropsType = mapStateToPropsType & mapDispatchPropsType\r\ntype PropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId.toString()\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<PropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}/>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id!,\r\n    isAuth: state.auth.isAuth,\r\n    isOwner: true\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}